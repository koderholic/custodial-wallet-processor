package main

import "fmt"

func main() {
    fmt.Println("Hello, world!")
    userController := NewUserController(&UserRepository{});
    
    userController.CreateUser();
}


// package repository.go

type IRepository interface {
    Get(id interface{}, model interface{}) interface{}
    Create(model interface{})
    Update(model interface{})
    Delete(model interface{})
}

type BaseRepository struct {
}

func (u *BaseRepository) Get(id interface{}, model interface{}) interface{} {
    return &User { 10, "Alex" }
}

func (b *BaseRepository) Create(model interface{}) {
    fmt.Printf("%+v", model)
     // save
}

func (b *BaseRepository) Update(model interface{}) {
     // update
}

func (b *BaseRepository) Delete(model interface{}) {
     // delete
}

type IUserRepository interface {
    IRepository
    GetTotalUnconfirmedAccounts(userId int) int    
}

type UserRepository struct {    
    BaseRepository   
}

func (u *UserRepository) GetTotalUnconfirmedAccounts(userId int) int {
     return 2334   
}

// package user_controller.go

type UserController struct {
    repository IUserRepository
}

func NewUserController(repository IUserRepository) *UserController {
    return &UserController { repository }
}

func (u * UserController) CreateUser() {
    // retrieve the user post request
    // populated the user model    
    user := User { 1, "Luchiano" };
    
    u.repository.Create(user);    
    
    result := u.repository.GetTotalUnconfirmedAccounts(0);
    
    fmt.Printf("\nTotal unconfirmed accounts: %d\n", result)
    
    user2 := u.repository.Get(10, &User{}).(*User)
    
    fmt.Printf("\nUser 10: %+v\n", user2.Name)    
}


type User struct {
    Id int
    Name string
}
